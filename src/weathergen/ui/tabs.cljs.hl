(ns weathergen.ui.tabs
  "Homegrown tab controls."
  (:require [weathergen.ui.common :as comm :refer [inl pct px]])
  (:require-macros
   [weathergen.cljs.macros :refer [with-attr-bindings with-bbox with-time formula-of]]))

;; (set! *warn-on-infer* true)

(defelem tabs
  "Renders a tab control. `selected` is a cell containing the ID of
  the currently selected tab. `tabs` is a vector of maps describing
  the tabs.

  `:tab-background` - background color of tabs

  Keys include:

  `:id` - Unique ID for the tab.
  `:title` - Title for the tab.
  `:ui` - Content for the tab.
  `:hidden?` - A cell for whether the tab is hidden or not
  "
  [attrs _]
  (with-attr-bindings attrs [tab-background selected tabs]
    (doseq [{:keys [id hidden?]} tabs]
      (when hidden?
        (add-watch hidden?
                   (gensym)
                   (fn [_ _ _ n]
                     (when (and n (= id @selected))
                       (reset! selected (-> tabs first :id)))))))
    (div
     (div
      :debug "buttons and spacer"
      :css {:position    "sticky"
            :top        0
            :background tab-background
            :z-index    100}
      (div
       :debug "tab buttons"
       :css {:border-bottom-width (px 1)
             :border-bottom-style "solid"
             :border-bottom-color "lightgray"}
       (for [{:keys [title id hidden?]} tabs]
         (div
          :click #(reset! selected id)
          :css (formula-of [selected hidden?]
                 (let [selected? (= selected id)]
                   {:display                 (if hidden? "none" "inline-block")
                    :background              (when selected? "black")
                    :border-top-left-radius  (px 5)
                    :border-top-right-radius (px 5)
                    :border-style            "solid"
                    :border-bottom-style     "none"
                    :border-width            (px 1)
                    :border-color            (if selected?
                                               "black"
                                               "lightgray")
                    :color                   (if (= selected id)
                                               "white"
                                               "#737373")
                    :font-size               (pct 120)
                    :padding                 (px 0 10 3 10)
                    :cursor                  "pointer"}))
          title)))
      (div
       :debug "spacer"
       :css {:background tab-background
             :height     (px 3)}))
     (for [{:keys [id ui]} tabs]
       (div
        :toggle (cell= (= id selected))
        ui)))))
