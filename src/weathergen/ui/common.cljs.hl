(ns weathergen.ui.common
  "Things used across various UI libraries."
  (:require [clojure.pprint :as pp]
            [garden.core :refer [css]]
            [goog.string :as gstring]
            [goog.string.format]
            [hoplon.svg :as svg])
  (:require-macros
   [weathergen.cljs.macros :refer [with-bbox with-time formula-of]]))

(def registered-styles (atom #{}))

(defn register-styles!
  "Adds styles to the head of the document. If already registered under `key`, does nothing."
  [key garden]
  (when-not (contains? @registered-styles key)
    (let [head (aget (.getElementsByTagName js/document "head") 0)
          styles (cell= (css garden))]
      (.appendChild head (style :type "text/css" styles))
      (swap! registered-styles conj key))))

(defelem styled
  "Creates an element which is a scope for a set of CSS rules,
  provided via a `:garden` attribute, by adding an element with a
  unique ID and new <style> element to the <head> of the document."
  [attrs content]
  (let [{:keys [garden]} attrs
        attrs (dissoc attrs :garden)
        head (aget (.getElementsByTagName js/document "head") 0)
        id (str (gensym))
        styles (cell= (css [(keyword (str "#" id))
                            garden]))]
    (.appendChild head (style :type "text/css" styles))
    (div
     (merge attrs {:id id})
     content)))

(defelem inl
  [attrs content]
  (let [{:keys [css]} attrs]
    (div
     (update attrs
             :css
             (fn [css-orig]
               (if (cell? css-orig)
                 (formula-of [css-orig]
                   (assoc css-orig :display "inline-block"))
                 (assoc css-orig :display "inline-block"))))
     content)))

(defelem triangle
  [attrs _]
  (let [{:keys [r]} attrs
        attrs (dissoc attrs :r)
        alpha 0.8660254037844387 ; sin 60deg
        beta 0.5 ; sin 30deg
        x (* r alpha)
        y (* r alpha)]
    (svg/path
     :d (gstring/format "M%f,%f L%f,%f L%f,%f Z"
                        0 (- y)
                        x y
                        (- x) y)
     attrs)))

(defn pre-cell
  "Pretty-prints the value of cell c and displays it in a pre tag."
  [title c]
  (register-styles!
   ::pre-cell
   [[:.pre-cell {:background "black"
                 :color "green"
                 :font-family "monospace"}]])
  (div
   :class "pre-cell"
   (h4 title)
   (pre
    :css {:white-space "pre-wrap"}
    (cell= (pp/write c :stream nil :pretty true)))))
