(ns weathergen.ui.common
  "Things used across various UI libraries."
  (:require [cljsjs.tinycolor]
            [clojure.pprint :as pp]
            [clojure.string :as str]
            [garden.core :refer [css]]
            [garden.selectors :as css-sel]
            [goog.string :as gstring]
            [goog.string.format]
            [hoplon.svg :as svg]
            [taoensso.timbre :as log
             :refer-macros (log trace debug info warn error fatal report
                                logf tracef debugf infof warnf errorf fatalf reportf
                                spy get-env log-env)]
            [weathergen.falcon.files.images :as im]
            [weathergen.falcon.files.mission :as mission]
            [weathergen.filesystem :as fs]
            [weathergen.settings :refer [app-dir]])
  (:require-macros
   [weathergen.cljs.macros :refer [with-attr-bindings with-bbox with-time formula-of]]))

;; This is a massive hack, and I have no idea what we're going to do if some other library decides to
;; say `module.exports` in its code.
(def tinycolor (.-exports js/module)
  #_(if (= "nodejs" cljs.core/*target*)
    (.-exports js/module)
    js/tinycolor))

(defn px
  "Returns a pixel measurement string, e.g. '2px'"
  [n]
  (str n "px"))

(def colors
  {:invalid       "#c70505"
   :invalid-background "#fcc"
   :error-message "#c70505"
   :edit "rgba(128,128,255,0.5)"
   :header-background "lightgray"
   :team {:dark-text {:white "gray"
                      :green "green"
                      :blue "blue"
                      :brown "#923c25"
                      :orange "darkorange"
                      :yellow "#caae18"
                      :red "red"
                      :gray "darkgray"}
          :light-text {:white "white"
                       :green "lightgreen"
                       :blue "#8ddbf5"
                       :brown "#e27e43"
                       :orange "orange"
                       :yellow "yellow"
                       :red "#f9adad"
                       :gray "lightgray"}}})

(defn team-color
  "Returns a color for a team."
  [team type]
  (get-in colors [:team type (mission/team-color team)]))

(def class-for
  "Given a keyword, returns a string safe to use as a css class name."
  (memoize
   (fn [kw]
     (-> kw str (subs 1) (str/replace #"[^a-zA-Z0-9]" "-")))))

(defn class-selector-for
  "Given a keyword, returns a garden class selector usable with class-for."
  [kw]
  (->> kw class-for (str ".") css-sel/selector))

(def registered-styles (atom #{}))

(defn register-styles!
  "Adds styles to the head of the document. If already registered under `key`, does nothing."
  [key garden]
  (when-not (contains? @registered-styles key)
    (let [head (aget (.getElementsByTagName js/document "head") 0)
          styles (cell= (css garden))]
      (when-dom head
        #(do
           (.appendChild head (style :type "text/css" styles))
           (swap! registered-styles conj key))))))

(defn register-class!
  "Adds a style to the head of a document for abstract class `key`.
  `key` should be a namespaced keyword that can then be used as the
  `:class` of an element via `class-for`. `garden` is the tail of a
  garden style statement, i.e. everything except the seelctor.

  Example:

  (register-class!
    ::foobar
    [{:background \"blue\"} [:&:hover {:background \"red\"}]])"
  [key garden]
  (register-styles! key (into [(class-selector-for key)] garden)))

(defn contrasting
  "Returns a color that contrasts well with the specified color.
  Optionally, the colors to use for dark and light can be specified."
  ([color] (contrasting color "black" "white"))
  ([color dark light]
   ;; http://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color
   (-> tinycolor (.mostReadable color #js [dark light]) .toHexString)
   #_(let [rgb (-> color tinycolor .toRgb)
         ;; Advanced compilation is somehow screwing up direct field
         ;; access, so we have to go in by name.
         r (aget rgb "r")
         g (aget rgb "g")
         b (aget rgb "b")]
     (if (< 128 (+ (* r 0.299) (* g 0.587) (* b 0.114)))
       dark
       light))))

(defn darken
  "Darkens a color by an amount from 0-100."
  [color amount]
  (-> color tinycolor (.darken amount) .toHexString))

(defn lighten
  "Lightens a color by an amount from 0-100."
  [color amount]
  (-> color tinycolor (.lighten amount) .toHexString))

(defn spin
  "Rotates a color by an amount from 0 to 360 degrees."
  [color amount]
  (-> color tinycolor (.spin amount) .toHexString))

(defn to-hex-str
  "Converts a color to a hex string."
  [color]
  (-> color tinycolor .toHexString))

(defelem styled
  "Creates an element which is a scope for a set of CSS rules,
  provided via a `:garden` attribute, by adding an element with a
  unique ID and new <style> element to the <head> of the document."
  [attrs content]
  (let [{:keys [garden]} attrs
        attrs (dissoc attrs :garden)
        head (aget (.getElementsByTagName js/document "head") 0)
        id (str (gensym))
        styles (cell= (css [(keyword (str "#" id))
                            garden]))]
    (.appendChild head (style :type "text/css" styles))
    (div
     (merge attrs {:id id})
     content)))

(defelem inl
  [attrs content]
  (let [{:keys [css]} attrs]
    (div
     (update attrs
             :css
             (fn [css-orig]
               (if (cell? css-orig)
                 (formula-of [css-orig]
                   (assoc css-orig :display "inline-block"))
                 (assoc css-orig :display "inline-block"))))
     content)))

(defelem triangle
  [attrs _]
  (let [{:keys [r]} attrs
        r*          (cell= r)
        attrs       (dissoc attrs :r)
        alpha       0.8660254037844387 ; sin 60deg
        beta        0.5                ; sin 30deg
        x           (cell= (* r* alpha))
        y           (cell= (* r* alpha))]
    (svg/path
     :d (formula-of [x y]
          (gstring/format "M%f,%f L%f,%f L%f,%f Z"
                          0 (- y)
                          x y
                          (- x) y))
     attrs)))

(defn pre-cell
  "Pretty-prints the value of cell c and displays it in a pre tag."
  [title c]
  (register-styles!
   ::pre-cell
   [[:.pre-cell {:background "black"
                 :color "green"
                 :font-family "monospace"}]])
  (div
   :class "pre-cell"
   (h4 title)
   (pre
    :css {:white-space "pre-wrap"}
    (cell= (pp/write c :stream nil :pretty true)))))

(defelem control-section
  [attributes children]
  (let [visible (cell (not (:collapsed? attributes)))
        change-visibility #(swap! visible not)]
    (fieldset
     :class "controls"
     (dissoc attributes :title :collapsed? :help-for)
     (legend
      (div
       :click change-visibility
       :class (formula-of [visible]
                          {:toggle true
                           :visible visible})
       "")
      (span
       (:title attributes)))
     (div
      :class "control-visibility-container"
      :toggle visible
      :fade-toggle visible
      (div :class "control-container" children)))))


(defn format-time
  [{:keys [day hour minute]}]
  (gstring/format "%02d/%02d%02d"
                  day
                  hour
                  minute))

(defelem color-picker
  [attrs _]
  ;; Because sometimes we want to set the value and not have the
  ;; corresponding change event fire, we override it, and only pass it
  ;; along when the change occurs while the picker is open. If we need
  ;; to, we can add an option or another event for changes that happen
  ;; due to the value cell being updated.
  (let [{:keys [change hide show]} attrs
        attrs* (dissoc attrs :change :hide :show)
        open? (atom false)]
    (with-let [i (input attrs*
                        :class "minicolors"
                        :type "hidden"
                        :change (fn [e]
                                  (when (and change @open?)
                                    (change e))))]
      (add-watch (:value attrs)
                 (-> (gensym) str keyword)
                 (fn [_ _ _ n]
                   (when n
                     (-> i js/jQuery (.minicolors "value" (to-hex-str n))))))
      (when-dom i
        #(-> i js/jQuery (.minicolors #js {"theme" "weathergen"
                                           "show" (fn []
                                                    (reset! open? true)
                                                    (when show (show)))
                                           "hide" (fn []
                                                    (reset! open? false)
                                                    (when hide (hide)))}))))))

(defelem side-label
  "Returns UI for the display name of a side."
  [attrs _]
  (let [{:keys [mission side]} attrs
        allies                 (formula-of [mission side]
                                 (let [side-teams (->> mission
                                                       mission/teams
                                                       (filter #(-> % :team :c-team (= side)))
                                                       (map #(-> % :team :who))
                                                       set)]
                                   (disj side-teams side)))]
    (div
     (dissoc attrs :mission :side)
     (for-tpl [elem (formula-of [mission side allies]
                      (interpose {:color "" :name "/"}
                                 (for [team (into [side] allies)]
                                   {:color (team-color team :dark-text)
                                    :name  (mission/team-name mission team)} )))]
       (cell-let [{:keys [color name]} elem]
         (span
          :css (cell= {:color color})
          (cell= name)))))))


(defn image-cache-path
  "Returns a path to where we should cache an image."
  [image-descriptor]
  (fs/path-combine app-dir "cache" "images" (str (im/cache-key image-descriptor) ".png")))

(defn save-blob-async
  "Asynchronously saves `blob` to `path`."
  [blob path]
  ;; While it would seem like there must be a better way to do this, I
  ;; haven't found it
  (let [reader (js/FileReader.)]
    (-> reader
        .-onload
        (set! (fn []
                (->> reader
                     .-result
                     js/Buffer.
                     (fs/save-data path))
                ;; Might need this - no idea what it does.
                ;;   deferred.resolve();
                )))
    (.readAsArrayBuffer reader blob)))

(defn get-image
  "Return a URL for the image identified by `image-descriptor`."
  [mission image-descriptor]
  (let [path (image-cache-path image-descriptor)]
    (if (fs/exists? path)
      path
      (let [canvas (.createElement js/document "canvas")]
        (with-time
          (str "Loading image " (:image-id image-descriptor))
          (im/read-image
           mission
           image-descriptor
           (fn [width height]
             (-> canvas .-width (set! width))
             (-> canvas .-height (set! height))
             (let [context (.getContext canvas "2d")
                   image-data (.getImageData context 0 0 width height)
                   buf (-> image-data .-data .-length js/ArrayBuffer.)
                   buf8 (js/Uint8ClampedArray. buf)
                   data (js/Uint32Array. buf)]
               {:set-pixel! (fn [^long x ^long y ^long argb]
                              (aset data (+ x (* y width)) argb))
                :finalize (fn []
                            (-> image-data .-data (.set buf8))
                            (-> context (.putImageData image-data 0 0)))}))))
        ;; Async - cache for later use
        (.toBlob canvas
                 (fn [blob]
                   (save-blob-async blob path)))
        (.toDataURL canvas)))))

(defelem team-selector
  "Draws a grid of flags and checkboxes to pick teams."
  [attrs _]
  (with-attr-bindings attrs [mission selected-teams selectable-teams]
    (div
     :css {:margin-bottom "5px"}
     attrs
     (for-tpl [team (cell= (mission/teams mission))]
       (inl
        :css (formula-of [team]
               {:margin-right   "3px"
                :padding        "3px"
                :border         (str "2px solid " (team-color team :dark-text))
                :text-align     "center"
                :vertical-align "top"})
        (img :css {:border "solid 1px black"}
             :src (formula-of [mission team]
                    (get-image
                     mission
                     (mission/team-flag mission
                                        team
                                        :big-vert))))
        (div
         :css {:text-align "center"}
         (span :css (cell= {:color (team-color team :dark-text)})
               (->> team :team :who (mission/team-name mission) cell=)))
        (div
         :css {:text-align "center"
               :height     "33px"}
         (let [val      (cell= (contains? selected-teams (mission/team-number team)))
               enabled? (cell= (contains? selectable-teams (mission/team-number team)))]
           (input :css {:margin "auto"}
                  :type "checkbox"
                  :toggle enabled?
                  :value val
                  :change #(swap! selected-teams
                                  (comp set (if @val disj conj))
                                  (mission/team-number @team))))))))))

(defelem side-selector
  "Draws a grid of flags and checkboxes to pick sides."
  [attrs _]
  (with-attr-bindings attrs [mission selected-sides]
    (div
     :css {:margin-bottom "5px"}
     attrs
     (for-tpl [side (cell= (mission/sides mission))]
       (inl
        :css (formula-of [side]
               {:margin-right "3px"
                :padding      "3px"
                :border       (str "2px solid " (team-color side :dark-text))
                :text-align   "center"})
        (for-tpl [team (cell= (mission/teams-for-side mission side))]
          (img :css {:border        "solid 1px black"
                     :padding-right "2px"}
               :src (formula-of [mission team]
                      (get-image
                       mission
                       (mission/team-flag mission
                                          team
                                          :big-vert)))))
        (div
         :css {:text-align "center"}
         (side-label :mission mission :side side))
        (div
         :css {:text-align "center"}
         (let [val (cell= (contains? selected-sides (mission/team-number side)))]
          (input :css {:margin "auto"}
                 :type "checkbox"
                 :value val
                 :change #(swap! selected-sides
                                 (comp set (if @val disj conj))
                                 (mission/team-number @side))))))))))

(defelem dropdown
  "Renders an HTML select. Attrs include :value, a cell or lens
  containing the current choice, which will be updated when the choice
  changes, and :choices, a vector of maps containing :value and :label
  keys."
  [attrs _]
  ;; TODO: Let choices be a cell if we ever need that.
  (with-attr-bindings attrs [value choices]
    (let [indexed  (map-indexed (fn [i c] [(str i) c])
                                choices)
          by-index (into {} indexed)]
      (with-let [s (select)]
        (s
         (assoc attrs
                :change (fn [v]
                          (log/debug "resetting dropdown value to"
                                     :v (pr-str @v)
                                     :by-index (-> @v by-index pr-str)
                                     :value (-> @v by-index :value pr-str))
                          (reset! value (-> @v by-index :value))))
         (for [[index choice] indexed]
           (with-let [o (option)]
             (o
              {:value    index
               :selected (formula-of [value]
                           (with-let [selected? (= value (:value choice))]
                             (when selected?
                               (-> s .-selectedIndex (set! (.-index o))))))}
              (:label choice)))))))))

