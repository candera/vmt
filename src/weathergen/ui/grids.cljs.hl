(ns weathergen.ui.grids
  "Homegrown grid controls."
  (:require [garden.core :refer [css]]
            [garden.selectors :as css-sel]
            [hoplon.svg :as svg]
            [taoensso.timbre :as log
             :refer-macros (log trace debug info warn error fatal report
                                logf tracef debugf infof warnf errorf fatalf reportf
                                spy get-env log-env)]
            [weathergen.ui.buttons :as buttons]
            [weathergen.ui.common :as comm :refer [inl px register-styles! triangle]])
  (:require-macros
   [weathergen.cljs.macros :refer [with-time formula-of with-attr-bindings]]))

(defelem master-detail
  "Creates a master-detail grid view. TODO: explain options."
  [attrs _]
  (let [{:keys [data detail columns formatter options]} attrs]
    (div
     (dissoc attrs :data :detail :columns :formatter :options)
     (let [data* (cell= data)
           columns* (cell= columns)
           options* (cell= options)
           ;; TODO: Should detail be permitted to be a cell?
           td* (fn [& args]
                 (apply td :css {:border "solid 1px #eee"
                                 :padding "0 2px 0 2px"} args))]
       (table
        :css {:background "white"
              :border-collapse "collapse"
              :outline "solid 1px #ccc"}
        (thead
         (tr
          :css {:background "linear-gradient(to bottom, white, white 33%, #eee 66%)"}
          (formula-of [columns*]
            (for [column columns*]
              (td (:name column))))
          #_(for-tpl [column columns*]
              (td (-> column :name cell=)))))
        (formula-of [data* columns*]
          (for [item data*]
            (let [expanded? (cell true)
                  subitems (detail item)
                  spacer-width "12px"
                  spacer-margin "3px"
                  spacing {:width spacer-width
                           :margin-right spacer-margin
                           :display "inline-block"}
                  spacer (fn [] (span :css spacing))]
              [(tbody
                (tr
                 (td*
                  :colspan (count columns*)
                  (if (-> subitems count zero?)
                    (spacer)
                    (div :css {:width spacer-width
                               :margin-right spacer-margin
                               :display "inline-block"
                               :text-align "center"
                               :vertical-align "middle"
                               :height "12px"
                               :border-radius "50%"
                               :border-color "black"
                               :border-style "solid"
                               :border-width "1px"
                               :text-anchor "6px"
                               :font-size "120%"
                               :line-height "12px"
                               :font-weight "bold"}
                         :click #(swap! expanded? not)
                         (if-tpl expanded? "-" "+")))
                  (formatter item))))
               (tbody
                (for [subitem subitems]
                  (tr
                   :fade-toggle expanded?
                   (let [formatter (:formatter (first columns*))]
                     (td*
                      (spacer)
                      (spacer)
                      (formatter subitem)))
                   (for [column (drop 1 columns*)]
                     (td*
                      (let [formatter (:formatter column)]
                        (formatter subitem)))))))])))
        #_(for-tpl [item data*]
            (let [expanded? (cell true)
                  subitems (formula-of [item] (detail item))]
              [(tbody
                (tr
                 (for-tpl [column columns*]
                   [(if-tpl (-> subitems count zero? cell=)
                      ""
                      (button :click #(swap! expanded? not) (if-tpl expanded? "-" "+")))
                    (cell=
                     (td* (formula-of [column item]
                            (let [fmt (:formatter column)]
                              (fmt :master item)))))])))
               (tbody
                :fade-toggle expanded?
                (for-tpl [subitem subitems]
                  (tr
                   (for-tpl [column columns*]
                     (td* (formula-of [column subitem]
                            (let [fmt (:formatter column)]
                              (fmt :detail subitem))))))))])))))))

(defn- sorters
  "Returns UI for the sort handles at the top of a column.
  `sort-state` is a tuple of column index and direction for the
  current sort. `column-index` is the index of the column we're
  rendering."
  [sort-criteria column-index]
  (inl
   :class "sorters"
   (svg/svg
    :width "20px"
    :viewBox "-100 -100 200 200"
    (comm/triangle :transform "rotate(180) translate(0 -50)"
                   :r 50
                   :stroke "black"
                   :stroke-width "2"
                   :fill (cell= (if (= sort-criteria [column-index :ascending])
                                  "black"
                                  "none")))
    (comm/triangle :transform "translate(0 -50)"
                   :r 50
                   :stroke "black"
                   :stroke-width "2"
                   :fill (cell= (if (= sort-criteria [column-index :descending])
                                  "black"
                                  "none"))))))

;; TODO: Don't bonk when row-attrs is nil
(defelem table-grid
  "Returns a table grid control. Attributes

:data - A cell containing a seq of maps
:row-attrs - A function from a cell containing a row to an Hoplon
             attrs map
:when-empty - UI to show when there are no rows in the data
:columns - A seq of maps describing columns

Column description:
:title - Shows up in the header row
:hidden? - [cell] [boolean] True to hide this column
:sort-key - Function from a row value (not cell) to a sort value
:formatter - Function from a row cell and row number cell to UI
:attrs - Function from cell of row item and cell of row number to
         Hoplon style map of attr values."
  [attrs _]
  (register-styles!
   ::table-grid
   [[:table.table-grid {:border-collapse "collapse"}
     [(css-sel/tr (css-sel/nth-child :even))
      {:background "#eee"}]
     [(css-sel/tr (css-sel/nth-child :odd))
      {:background "white"}]
     [:thead
      [:td {:background "#ddd"
            :border     "solid 1px grey"
            :padding    "2px 4px 4px 4px"}]
      [:.sorters {:float "right"}
       [:svg {:vertical-align "bottom"}]]]
     [:tbody [:td {:padding "2px 3px 2px 3px"
                   :border  "solid 1px lightgray"
                   ;;:border-bottom "none"
                   ;;:border-top "none"
                   }]]]
    [:td.hidden-column {:display "none"}]])
  (with-attr-bindings attrs [data columns row-attrs when-empty]
    (let [sort-criteria    (cell nil)
          columns*         (->> columns
                                (map-indexed (fn [i m] (assoc m
                                                              ::index i
                                                              :hidden? (get m :hidden? (cell false)))))
                                (into []))
          sorted-items     (formula-of [data sort-criteria]
                             (if-not sort-criteria
                               data
                               (let [[sort-column sort-direction] sort-criteria
                                     {:keys [sort-key]} (nth columns* sort-column)]
                                 (sort-by sort-key
                                          (if (= sort-direction :ascending)
                                            compare
                                            (fn [a b]
                                              (- (compare a b))))
                                          data))))
          editing-columns? (cell false)]
      (table
       :class "table-grid"
       (thead
        (tr
         (td :colspan (count columns*)
             (buttons/image-button
              :src "images/settings.svg"
              :width (px 16)
              :title "Settings"
              :latched? editing-columns?
              :click #(swap! editing-columns? not))))
        (tr (for [column columns*]
              (let [{:keys [title disable-sort hidden?]} column
                    column-index                         (::index column)]
                (td
                 :class (formula-of [editing-columns? hidden?]
                          {:hidden-column (and (not editing-columns?) hidden?)})
                 :click #(when-not disable-sort
                           (swap! sort-criteria
                                  (fn [[old-index direction]]
                                    [column-index
                                     (cond
                                       (not= old-index column-index)
                                       :ascending

                                       (= direction :ascending)
                                       :descending

                                       :else
                                       :ascending)]))
                           true)
                 (when-tpl editing-columns?
                   (inl
                    :css (formula-of [hidden?]
                           {:border-width (px 2)
                            :border-style "inset"
                            :border-radius (px 3)
                            :color (if hidden? "red" "green")
                            :background "white"
                            :line-height "90%"
                            :padding (px 1)
                            :cursor "pointer"
                            :width (px 10)})
                    :click (fn [_]
                             (swap! hidden? not)
                             false)
                    (if-tpl hidden? "✗" "✓")))
                 title
                 (if disable-sort
                   []
                   (sorters sort-criteria column-index)))))))
       (if-tpl (-> sorted-items count zero? (and when-empty) cell=)
         (tbody
          (tr
           (td
            :colspan (count columns*)
            when-empty)))
         (tbody
          (for-tpl [indexed (cell= (map-indexed vector sorted-items))]
            (cell-let [[rownum item] indexed]
              (tr
               (row-attrs item rownum)
               (for [column columns*]
                 (let [{:keys [attrs formatter hidden?]} column]
                   (td
                    :class (formula-of [editing-columns? hidden?]
                             {:hidden-column (and (not editing-columns?) hidden?)})
                    (let [attrs (or attrs (constantly {}))]
                      (attrs item rownum))
                    (formatter item)))))))))))))
