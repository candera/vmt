(ns weathergen.ui.layers.flights
  "Responsible for drawing the flight path layer and the associated controls."
  (:require [clojure.set :as set]
            [goog.string :as gstring]
            [goog.string.format]
            [hoplon.storage-atom :refer [local-storage]]
            [hoplon.svg :as svg]
            [taoensso.timbre :as log
             :include-macros true
             :refer (log trace debug info warn error fatal report
                         logf tracef debugf infof warnf errorf fatalf reportf
                         spy get-env log-env)]
            [weathergen.coordinates :as coords]
            [weathergen.falcon.constants :as c]
            [weathergen.falcon.files.images :as im]
            [weathergen.falcon.files.mission :as mission]
            [weathergen.ui.buttons :as buttons]
            [weathergen.ui.common :as comm :refer [colors control-section format-time inl pre-cell styled team-color]]
            [weathergen.ui.grids :as grids]
            [weathergen.util :as util])
  (:require-macros
   [weathergen.cljs.macros :refer [with-bbox with-time formula-of]]))

(def mission-category-names
  {c/ATO_OCA "OCA"
   c/ATO_STRIKE "Strike"
   c/ATO_INTERDICTION "Interdiction"
   c/ATO_SEAD "SEAD"
   c/ATO_CAS "CAS"
   c/ATO_DCA "DCA"
   c/ATO_CCCI "C3I"
   c/ATO_MARITIME "Maritime"
   c/ATO_SUPPORT "Support"
   c/ATO_OTHER "Other"})

(def default-mission-category-colors
  {c/ATO_OCA (comm/to-hex-str "green")
   c/ATO_STRIKE "#e00000"
   c/ATO_INTERDICTION "#cc00cc"
   c/ATO_SEAD "#640082"
   c/ATO_CAS (comm/to-hex-str "darkblue")
   c/ATO_DCA "#ffa800"
   c/ATO_CCCI (comm/to-hex-str "white")
   c/ATO_MARITIME (comm/to-hex-str "lightblue")
   c/ATO_SUPPORT "#a8a8a8"
   c/ATO_OTHER (comm/to-hex-str "black")})

(def mission-category-colors
  (local-storage
   (cell default-mission-category-colors)
   (str ::mission-category-colors)))

(def hidden-columns
  (local-storage
   (cell #{})
   (str ::hidden-columns)))

(def movable-columns
  (local-storage
   (cell [:combatant
          :callsign
          :airframe
          :mission
          :package
          :squadron
          :airbase
          :takeoff
          :tot
          :egress])
   (str ::movable-columns4)))

(def row-primary-color "white")
(def row-alternate-color "#f0f0f0")
(def row-tertiary-color "darkgrey")

(defn row-color
  "Returns a color for a table row based on its ordinal."
  [rownum]
  (when rownum
    (if (even? rownum)
      row-alternate-color
      row-primary-color)))

(defn flight-mission-color
  "Returns the color for a flight mission"
  [mission flight colors]
  (->> flight
       (mission/flight-mission-category mission)
       colors))

(defn controls
  [{:keys [all-flights checked-flights display highlighted-flight
           mission selected-teams visible-teams]}]
  (control-section
   :title "Flights"
   (cond-tpl
     (-> mission not cell=)
     "No mission loaded"

     (-> all-flights count zero? cell=)
     "No flights present in the mission"

     :else
     (vector
      (fieldset
       :css {:margin-bottom "3px"}
       (legend "Mission Key")
       (div
        :css {:display   "flex"
              :flex-wrap "wrap"
              :max-width "400px"}
        (for [[id name] mission-category-names]
          (div
           :css {:white-space "nowrap"}
           (inl
            :css {:margin-right "3px"}
            :click (constantly false)
            (comm/color-picker
             :value (formula-of [mission-category-colors] (mission-category-colors id))
             :change #(swap! mission-category-colors assoc id @%)))
           (inl :css {:width "70px"} name))))
       (buttons/a-button
        :click #(reset! mission-category-colors default-mission-category-colors)
        "Reset to defaults"))
      (comm/team-selector
       :mission mission
       :selected-teams selected-teams
       :selectable-teams visible-teams)
      (grids/table-grid
       :data (formula-of [mission all-flights selected-teams]
               (->> all-flights
                    (filter #(contains? selected-teams (:owner %)))))
       :when-empty (text "No flights to show")
       :row-attrs (fn [flight rownum]
                    (when (and flight rownum)
                      {:css        (formula-of [rownum flight highlighted-flight]
                                     {:background (if (= highlighted-flight flight)
                                                    "lightgoldenrodyellow"
                                                    (row-color rownum))})
                       :mouseenter #(reset! highlighted-flight @flight)
                       :mouseleave #(reset! highlighted-flight nil)
                       :click      #(do
                                      ;; It's confusing if we click something to
                                      ;; hide it, but it stays visible due to
                                      ;; highlighting.
                                      (dosync
                                       (swap! checked-flights util/toggle-set-membership @flight)
                                       (reset! highlighted-flight (@checked-flights @flight))))
                       :class      (cell= {:highlighted (= highlighted-flight flight)})}))
       :hidden-columns hidden-columns
       :fixed-columns (cell [:show? :info])
       :movable-columns movable-columns
       :columns (let [col (fn [title f]
                            {:title     title
                             :sort-key  #(f @mission %)
                             :formatter (fn [flight]
                                          (formula-of [mission flight]
                                            (f mission flight)))})]
                  {:show?     {:title     "Show?"
                               :sort-key  (fn [flight]
                                            (not (@checked-flights flight)))
                               :formatter (fn [flight]
                                            (cell-let [{:keys [camp-id]} flight]
                                              (let [visible? (formula-of [checked-flights flight]
                                                               (checked-flights flight))]
                                                (vector
                                                 (input :camp-id camp-id
                                                        :type "checkbox"
                                                        :value visible?)
                                                 (inl
                                                  :css {:margin-right   "2px"
                                                        :vertical-align "middle"}
                                                  :click (constantly false)
                                                  (comm/color-picker
                                                   :value (formula-of [mission flight camp-id display mission-category-colors]
                                                            (if-let [c (get-in display [camp-id :color])]
                                                              c
                                                              (flight-mission-color mission
                                                                                    flight
                                                                                    mission-category-colors)))
                                                   :change #(swap! display assoc-in [@camp-id :color] @%)))))))}
                   :info      {:title     "Info"
                               :disable-sort true
                               :formatter (fn [flight]
                                            (cell-let [{:keys [camp-id]} flight]
                                              (let [visible? (formula-of [checked-flights flight]
                                                               (checked-flights flight))]
                                                (buttons/image-button
                                                 :src "images/ellipsis.svg"
                                                 :width "12px"
                                                 :height "12px"
                                                 :title "More options..."))))}
                   :combatant {:title     "Who"
                               :sort-key  #(->> %
                                                :owner
                                                (mission/team-name @mission))
                               :formatter #(let [team (cell= (:owner %))]
                                             (inl
                                              :css (cell= {:color (team-color team :dark-text)})
                                              (cell= (mission/team-name mission team))))}
                   :package   (col "Package"
                                   (fn [mission flight]
                                     (->> flight
                                          :package
                                          (mission/package-name mission))))
                   :squadron (col "Squadron"
                                  (fn [mission flight]
                                    (->> flight
                                         (mission/flight-squadron mission)
                                         (mission/unit-name mission))))
                   :airbase   (col "Airbase"
                                   (fn [mission flight]
                                     (when (and mission flight)
                                       (->> flight
                                            (mission/flight-squadron mission)
                                            (mission/squadron-airbase mission)
                                            ::mission/name))))
                   :airframe  (col "Aircraft"
                                   (fn [mission flight]
                                     (let [{:keys [quantity airframe]} (mission/flight-aircraft mission flight)]
                                       (str quantity " " airframe))))
                   :callsign  (col "Callsign"
                                   (fn [_ flight] (:name flight)))
                   :mission   {:title     "Mission"
                               :sort-key  (fn [flight]
                                            (mission/flight-mission-name @mission flight))
                               :formatter (fn [flight]
                                            (formula-of [mission flight]
                                              (mission/flight-mission-name mission flight)))
                               :css       (fn [flight rownum]
                                            (formula-of [mission flight mission-category-colors rownum]
                                              (let [color    (flight-mission-color mission
                                                                                   flight
                                                                                   mission-category-colors)
                                                    contrast (comm/contrasting color
                                                                               row-tertiary-color
                                                                               (row-color rownum))]
                                                {:background contrast
                                                 :color      color})))}
                   :takeoff   (col "T/O"
                                   (fn [_ flight]
                                     (->> flight :waypoints first :depart format-time)))
                   :tot       (col "TOT"
                                   (fn [_ flight]
                                     (->> flight :time-on-target format-time)))
                   :egress    (col "Egress"
                                   (fn [_ flight]
                                     (->> flight :mission-over-time format-time)))}))))))

(defn waypoint-grid-coords
  "Given a BMS waypoint, return an x/y map of its weatherspace coordinates."
  [mission waypoint]
  (coords/fgrid->weather mission (:grid-x waypoint) (:grid-y waypoint)))

(defn waypoints->path
  "Given a sequence of BMS waypoints, return an SVG path that follows them."
  [mission waypoints]
  (some->> waypoints
           (util/take-until #(-> % :flags (bit-and c/WPF_LAND) zero? not))
           (mapv #(waypoint-grid-coords mission %))
           (mapv #(gstring/format "%f,%f" (:x %) (:y %)))
           (interpose " L")
           (apply str "M")))

(defn flight-path-overlay
  [flight {:keys [checked-flights display highlighted-flight mission map-zoom]}]
  (let [camp-id                    (cell= (:camp-id flight))
        highlighted?               (formula-of [flight highlighted-flight]
                                     (= flight highlighted-flight))
        color                      (formula-of [mission flight camp-id display highlighted? mission-category-colors]
                                     (if highlighted?
                                       "yellow"
                                       (get-in display [camp-id :color] (flight-mission-color mission
                                                                                              flight
                                                                                              mission-category-colors))))
        ;; Styling
        opacity                    1
        label-stroke-width         0.01
        narrow-stroke-width        0.1
        lines-stroke-dasharray-on  0.1
        lines-stroke-dasharray-off 0.1
        wide-stroke-width          0.15
        font-size                  4 ; Percent
        font-weight                400
        marker-size                0.4
        background-opacity         0.4
        compute-strokes            (fn [color]
                                     [{:width wide-stroke-width
                                       :color (comm/contrasting color)}
                                      {:width narrow-stroke-width
                                       :color color}])
        magnify                    (fn [scale]
                                     (->> scale (* 1.5) (+ 1)))]
    (svg/g
     :flight (cell= (:name flight))
     (cell-let [{:keys [waypoints]} flight]
       (let [magnification (cell= (if highlighted? 1.4 1.2))
             strokes       (cell= (compute-strokes color))
             anticolor     (cell= (comm/contrasting color))]
         (svg/g
          :debug "waypoint markers and lines"
          ;; TODO: Steerpoint lines
          ;; The flight path route itself
          (svg/g
           :debug "waypoint lines"
           (for-tpl [stroke strokes]
             (cell-let [{:keys [width color]} stroke]
               (svg/path
                :stroke color
                :stroke-width (cell= (-> width (* magnification) (/ map-zoom)))
                :fill "none"
                :pointer-events "none"
                :opacity opacity
                :d (formula-of [mission waypoints]
                     (waypoints->path mission waypoints))))))
          (svg/g
           :debug "waypoint markers"
           :transform (formula-of [map-zoom]
                        (gstring/format "scale(%f,%f)" (/ 1.0 map-zoom) (/ 1.0 map-zoom)))
           (for-tpl [indexed (cell= (map-indexed vector waypoints))]
             (cell-let [[ordinal waypoint] indexed
                        {:keys [action grid-x grid-y]} waypoint
                        {:keys [x y]} (cell= (coords/fgrid->weather mission grid-x grid-y))]
               (let [style {:pointer-events "none"
                            :fill           "none"
                            :opacity        opacity}]
                 (svg/g
                  :debug "waypoint markers"
                  :transform (formula-of [x y map-zoom]
                               (gstring/format "translate(%f,%f)"
                                               (* x map-zoom) (* y map-zoom)))
                  (for-tpl [stroke strokes]
                    (svg/g
                     :debug "waypoint marker"
                     (cell-let [{:keys [width color]} stroke]
                       (let [r       (formula-of [magnification] (/ (* marker-size magnification) 2))
                             style*  (assoc style
                                            :opacity opacity
                                            :stroke color
                                            :stroke-width (cell= (* 0.6 width magnification)))
                             circle? (formula-of [waypoint]
                                       (-> waypoint :flags (bit-and c/WPF_TARGET) zero?))]
                         (if-tpl circle?
                           (svg/circle
                            style*
                            :cx 0
                            :cy 0
                            :r r)
                           (comm/triangle
                            style*
                            :r r))))))
                  (let [show-labels?  (cell true)
                        show-numbers? (cell true)]
                    (let [txt          (formula-of [waypoint action show-labels? show-numbers? ordinal]
                                         (cond
                                           (and show-labels? (-> waypoint :flags (bit-and c/WPF_ALTERNATE) zero? not))
                                           "Alternate Field"

                                           (and show-labels? (= action c/WP_REFUEL))
                                           (when show-labels? "Tanker")

                                           :else
                                           (when show-numbers? (inc ordinal))))
                          bbox-trigger (formula-of [txt magnification]
                                         [txt magnification])]
                      (with-bbox :w tw :h th :x tx :y ty :watch bbox-trigger
                        [t (svg/text
                            :stroke color
                            :stroke-width (cell= (* label-stroke-width magnification))
                            :fill color
                            :font-size (cell= (str (* font-size magnification) "%"))
                            :text-anchor "middle"
                            :opacity opacity
                            :x 0
                            :y (cell= (- (* marker-size magnification)))
                            txt)]
                        (svg/g
                         :debug "waypoint label"
                         :toggle (cell= (some? txt))
                         (svg/rect
                          :x tx
                          :y ty
                          :width tw
                          :height th
                          :fill anticolor
                          :opacity background-opacity)
                         t)))))))))))))))

(defn overlay
  [{:keys [checked-flights highlighted-flight mission selected-teams] :as state}]
  (let [displayed-flights (formula-of [checked-flights highlighted-flight mission selected-teams]
                            (->> checked-flights
                                 (filter #(selected-teams (:owner %)))
                                 set))]
    (svg/g
     :section "flights-overlay"
     (svg/g
      :section "checked-flight-paths"
      (for-tpl [flight (cell= (disj displayed-flights highlighted-flight))]
        (flight-path-overlay flight state))
      (when-tpl highlighted-flight
        (svg/g
         :section "highlighted-flight-path"
         (flight-path-overlay highlighted-flight state)))))))

(defn create
  [mission map-zoom visible-teams]
  (let [state {:mission            mission
               :map-zoom           map-zoom
               :checked-flights    (cell #{})
               :highlighted-flight (cell nil)
               :visible-teams      visible-teams
               :display            (cell {})
               :all-flights        (cell= (some->> mission :units (filter #(= (:type %) :flight))))
               :selected-teams     (cell #{})}
        watchable (formula-of [mission visible-teams]
                    [mission visible-teams])]
    (do-watch watchable
              ::reset-on-mission-change
              (fn [_ [mission visible-teams]]
                (with-time
                  "updating flights section"
                  (dosync
                   (reset! (:display state) {})
                   (reset! (:highlighted-flight state) nil)
                   (reset! (:checked-flights state) #{})
                   (reset! (:selected-teams state)
                           (let [last-allied (->> (mission/last-player-team mission)
                                                  (mission/side mission)
                                                  (mission/teams-for-side mission)
                                                  set)]
                             (if (->> visible-teams
                                      (set/intersection last-allied)
                                      empty?)
                               visible-teams
                               last-allied)))))))
    (assoc state
           :controls (controls state)
           :overlay (overlay state))))

