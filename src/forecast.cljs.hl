(page "forecast.html"
  (:require [clojure.string :as str]
            [cljsjs.pako]
            [goog.crypt.base64 :as base64]
            [longshi.core :as fress]
            [weathergen.coordinates :as coords]
            [weathergen.database :as db]
            [weathergen.math :as math]
            [weathergen.model :as model]
            [weathergen.ui :as ui])
  (:require-macros
   [cljs.core.async.macros :refer [go go-loop]]
   [weathergen.cljs.macros :refer [with-time formula-of]]))

(let [inflate #(.inflate js/pako %)
      {:keys [weather-params
              display-params
              movement-params]}
      (-> js/window
          .-location
          .-search
          (subs (count "?data="))
          base64/decodeStringToUint8Array
          inflate
          fress/read)]
  (dosync
   (reset! ui/weather-params weather-params)
   (reset! ui/display-params
           (assoc
            display-params
            :dimensions
            [ui/initial-size ui/initial-size]))
   (reset! ui/movement-params movement-params)
   (reset! ui/time-params {:displayed (-> weather-params :time :current)})
   (swap! ui/weather-params
          (fn [wp]
            (assoc-in wp
                      [:time :max]
                      (-> wp :time :current))))))

(ui/weather-page
 :display-controls {:prevent-map-change? true}
 :step-controls {:mode :browse}
 :forecast-section {:forecast-link? false})
