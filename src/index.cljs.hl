(page "index.html"
  (:require [cljs.pprint :refer [pprint]]
            [weathergen.ipc :as ipc]
            [weathergen.ui :as ui]
            [weathergen.ui.buttons :as buttons]
            [weathergen.ui.common :as comm :refer [inl pct px]]
            [weathergen.ui.trees :as trees]
            [taoensso.timbre :as log
             :refer-macros (log trace debug info warn error fatal report
                                logf tracef debugf infof warnf errorf fatalf reportf
                                spy get-env log-env)])
  (:require-macros
   [weathergen.cljs.macros :refer [with-bbox with-time formula-of]]))

(def electron (js/require "electron"))

;; A vector of step maps, each of which has
;; keys :state, :id, :name, :parent, and :messages
(defc load-status
  [])

(defc loading? false)

(defn- update-for-id
  "Updates the entry in `status` whose id is `id`, by replacing it with
  the result of calling `f` on it."
  [status id f]
  (->> status
       (mapv #(if (= (:id %) id)
                (f %)
                %))))

(defmethod ipc/on-message "load-step-started"
  [_ _ {:keys [id name parent]}]
  (when @loading?
    (swap! load-status conj {:state    :started
                             :id       id
                             :name     name
                             :messages []
                             :parent   (or parent ::root)})))

(defmethod ipc/on-message "load-step-succeeded"
  [_ _ {:keys [id]}]
  (when @loading?
    (swap! load-status update-for-id id #(assoc % :state :succeeded))))

(defmethod ipc/on-message "load-step-warning"
  [_ _ {:keys [id message]}]
  (when @loading?
    (swap! load-status update-for-id id #(-> %
                                             (assoc :state :warning)
                                             (update :messages conj {:type :warning
                                                                     :text message})))))

(defmethod ipc/on-message "load-step-failed"
  [_ _ {:keys [id message]}]
  (when @loading?
    (swap! load-status update-for-id id #(-> %
                                             (assoc :state :failed)
                                             (update :messages (fn [messages]
                                                                 (if message
                                                                   (conj messages {:type :error
                                                                                   :text message})
                                                                   messages)))))))


(defmethod ipc/on-message "load-complete"
  [_ event]
  (.log js/console "load-complete")
  (dosync
   (reset! loading? false)
   (swap! load-status update-for-id ::root #(-> %
                                                (assoc :state :succeeded)))))

(defmethod ipc/on-message "load-failed"
  [_ _ err]
  (.log js/console "load-failed" err)
  (dosync
   (reset! loading? false)
   (swap! load-status #(->> %
                            (map (fn [step]
                                   (if (= (:state step) :started)
                                     (assoc step :state :failed)
                                     step)))))
   (swap! load-status update-for-id ::root #(-> %
                                                (assoc :state :failed)
                                                (update :messages (fn [messages]
                                                                    (if err
                                                                      (conj messages {:type :error
                                                                                      :text err})
                                                                      messages)))))))

(defn load-mission
  []
  (when-let [[path] (-> electron
                        .-remote
                        .-dialog
                        (.showOpenDialog
                         (clj->js {:title      "Select a campaign or tactical engagement file"
                                   :properties ["openFile"]
                                   :filters    [{:name       "Campaign file"
                                                 :extensions ["cam"]}
                                                {:name       "Tactical engagement file"
                                                 :extensions ["tac"]}]})))]
    (dosync
     (reset! loading? true)
     (reset! load-status [{:id    ::root
                           :state :started
                           :name  "Loading mission"}]))
    (ipc/send-to-main "open-mission" path)))

(defn load-briefing
  []
  (when-let [[path] (-> electron
                        .-remote
                        .-dialog
                        (.showOpenDialog
                         #js {:title "Select a campaign or tactical engagement file"
                              :openFile true
                              :filters #js [#js {:name "VMT Briefing"
                                                 :extensions #js ["vmtb"]}]}))]
    (dosync
     (reset! loading? true)
     (reset! load-status [{:id    ::root
                           :state :started
                           :name  "Loading briefing"}]))
    (ipc/send-to-main "open-briefing" path)))

(html
 (ui/head)
 (body
  :css {:margin "0"}
  (div
   :css {:display        "flex"
         :flex-direction "column"
         :height         "100vh"}
   (div
    :css {:padding "8px 8px 0"}
    (ui/titlebar))
   (let [button-style {:display "inline-block"
                       :margin  (px 5 10)}]
     (div
      :css {:font-size (pct 150)}
      (buttons/a-button
       :disabled? loading?
       :css button-style
       :click load-mission
       "Load mission (.cam/.tac)")
      (buttons/a-button
       :disabled? loading?
       :css button-style
       :click load-briefing
       "Load briefing (.vmtb)")))
   (with-let [elem (div
                    :css {:overflow-y "auto"
                          :overflow-x "auto"
                          :flex       1
                          :font-size  "150%"
                          :border     "solid 1px black"
                          :margin     "0 10px 20px 10px"
                          :padding    "4px"}
                    (comm/styled
                     :garden [:ol {:margin-top 0}]
                     (trees/tree
                      (cell :all-expanded)
                      (repeat {:formatter (fn [expanded? item]
                                            (cell-let [{:keys [id messages state name]} item]
                                              (inl
                                               (inl
                                                :css {:vertical-align "top"}
                                                (case-tpl state
                                                  :succeeded (inl :css {:font-weight    "bold"
                                                                        :color          "green"
                                                                        :width          (px 24)
                                                                        :vertical-align "top"}
                                                                  "✓")
                                                  :failed    (inl :css {:font-weight    "bold"
                                                                        :color          "red"
                                                                        :width          (px 24)
                                                                        :vertical-align "top"}
                                                                  "✗")
                                                  :started   (img :css {:width      (px 24)
                                                                        :vertical-align "top"
                                                                        :margin-top (px 5)}
                                                                  :src "images/spinner.gif")
                                                  :warning   (img :css {:width        (px 24)
                                                                        :vertical-align "top"
                                                                        :margin-top   (px 5)
                                                                        :margin-right (px 3)}
                                                                  :src "images/warning.svg"))
                                                (inl
                                                 :css {:white-space "normal"}
                                                 name))
                                               (table
                                                :css {:margin-left (px 30)}
                                                (for-tpl [message messages]
                                                  (cell-let [{:keys [type text]} message]
                                                    (tr
                                                     (td
                                                      :css {:vertical-align "top"}
                                                      (case-tpl type
                                                        :warning (img :css {:width          (px 24)
                                                                            :vertical-align "middle"
                                                                            :margin-top     (px -5)}
                                                                      :src "images/warning.svg")
                                                        :error   (inl :css {:font-weight "bold"
                                                                            :color       "red"
                                                                            :width       (px 24)}
                                                                      "✗")))
                                                     (td
                                                      (div
                                                       :css (formula-of [type]
                                                              (if (= type :error)
                                                                {:white-space "pre"
                                                                 :font-family "monospace"
                                                                 :margin-top  (px 7)}
                                                                {:white-space "normal"}))
                                                       text)))))))))
                               :children  (fn [item]
                                            (formula-of [item load-status]
                                              (->> load-status
                                                   (filter #(-> % :parent (= (:id item)))))))})
                      (formula-of [load-status]
                        (->> load-status
                             (filter #(-> % :parent nil?)))))))]
     (add-watch load-status
                ::scroll-notifications
                (fn [_ _ _ _]
                  (with-timeout 0
                    ;; TODO: Scroll to the bottom of the element, not the top
                    (-> elem .-scrollTop (set! (.-scrollHeight elem))))))))))
