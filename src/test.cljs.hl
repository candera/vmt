(page "test.html"
  (:require [clojure.string :as str]
            [cljsjs.pako]
            [goog.crypt.base64 :as base64]
            [hoplon.storage-atom :refer [local-storage]]
            [weathergen.coordinates :as coords]
            [weathergen.database :as db]
            [weathergen.math :as math]
            [weathergen.model :as model]
            [weathergen.ui :as ui]
            [weathergen.ui.grids :as grids])
  (:require-macros
   [cljs.core.async.macros :refer [go go-loop]]
   [weathergen.cljs.macros :refer [with-time formula-of]]))

;; (reset! ui/max-time {:day 2 :hour 2 :minute 2})

;; (reset! ui/weather-params
;;         ui/default-weather-params)

;; (ui/weather-page
;;  :test-section {})

(def hidden-columns
  (local-storage
   (cell #{:bar :baaz})
   (str ::hidden-columns)))

(def movable-columns
  (local-storage
   (cell [:foo :bar :baaz :quux])
   (str ::movable-columns2)))

(html
 (ui/head)
 (body
  (grids/table-grid
   :data [{:foo 1
           :bar 2
           :baaz "a"
           :quux "hi"}
          {:foo 3
           :bar 4
           :baaz "b"
           :quux "there"}
          {:foo 10
           :bar 2034234
           :baaz "c"
           :quux "long words"}]
   :row-attrs (constantly {})
   :hidden-columns hidden-columns
   :fixed-columns (cell [])
   :movable-columns movable-columns
   :columns {:foo {:title "foo"
                   :formatter (fn [item]
                                (formula-of [item]
                                  (:foo item)))
                   :sort-key :foo
                   :css (fn [item rownum]
                          (formula-of [item rownum]
                            {:background-color (if (odd? rownum)
                                                 "purple"
                                                 "pink")}))}
             :bar {:title "bar"
                   :formatter (fn [item]
                                (formula-of [item]
                                  (:bar item)))
                   :sort-key :bar}
             :baaz {:title "baaz"
                    :formatter (fn [item]
                                 (formula-of [item]
                                   (:baaz item)))
                    :sort-key :baaz}
             :quux {:title "quux"
                    :formatter (fn [item]
                                 (formula-of [item]
                                   (:quux item)))
                    :sort-key :quux}})))

