(page "test.html"
  (:require [clojure.string :as str]
            ;; [cljsjs.pako]
            [goog.crypt.base64 :as base64]
            [hoplon.storage-atom :refer [local-storage]]
            [weathergen.coordinates :as coords]
            [weathergen.database :as db]
            [weathergen.falcon.install :as install]
            [weathergen.falcon.files.mission :as mission]
            [weathergen.math :as math]
            [weathergen.model :as model]
            [weathergen.ui :as ui]
            [weathergen.ui.buttons :as buttons]
            [weathergen.ui.common :as comm :refer [px]]
            [weathergen.ui.grids :as grids]
            [weathergen.ui.layers.flights :as flights])
  (:require-macros
   [cljs.core.async.macros :refer [go go-loop]]
   [weathergen.cljs.macros :refer [with-time formula-of]]))

;; (reset! ui/max-time {:day 2 :hour 2 :minute 2})

;; (reset! ui/weather-params
;;         ui/default-weather-params)

;; (ui/weather-page
;;  :test-section {})

(def hidden-columns
  (local-storage
   (cell #{:bar :baaz})
   (str ::hidden-columns)))

(def movable-columns
  (local-storage
   (cell [:foo :bar :baaz :quux])
   (str ::movable-columns2)))

(defc installations nil)

(install/locate-installations
 (fn [installs]
   (reset! installations installs)))

(defn load-mission
  [mission]
  (when-let [[path] (-> "electron"
                        js/require
                        .-remote
                        .-dialog
                        (.showOpenDialog
                         (clj->js {:title      "Select a campaign or tactical engagement file"
                                   :properties ["openFile"]
                                   :filters    [{:name       "Campaign file"
                                                 :extensions ["cam"]}
                                                {:name       "Tactical engagement file"
                                                 :extensions ["tac"]}]})))]
    (reset! mission (with-time "read-mission"
                      (mission/read-mission @installations path)))))

(html
 (ui/head)
 (let [b (body)]
   (b
    (let [mission (cell nil)
          flight-layer (flights/create mission
                                       (cell 1.0)
                                       (formula-of [mission]
                                         (->> mission mission/teams (map mission/team-number) set)))]
      (formula-of [mission]
        (.log js/console (clj->js (map mission/team-number (mission/teams mission)))))
      (div
       (buttons/a-button
        :click #(with-time "load-mission"
                  (load-mission mission))
        "Load")
       (let [ctor (:controls-fn flight-layer)]
         (ctor b))))
    #_(let [latched? (cell false)
            element (div
                     :class "element"
                     :css {:background "green"
                           :color "white"
                           :width (px 100)
                           :height (px 100)}
                     "Element")
            content (div
                     :class "content"
                     :css {:background "yellow"
                           :color "black"
                           :width (px 200)
                           :height (px 150)}
                     "Content")
            ;; element (div
            ;;          (div
            ;;           :toggle latched?
            ;;           :css {:background "white"
            ;;                 :border-color "black"
            ;;                 :border-width (px 1)}
            ;;           "This is some content"))
            ;; toggler (div
            ;;          (buttons/a-button
            ;;           :click #(swap! latched? not)
            ;;           :latched? latched?
            ;;           :css {:border-radius "50%"
            ;;                 :width (px 15)
            ;;                 :height (px 15)
            ;;                 :text-align "center"
            ;;                 :font-weight "bold"
            ;;                 :font-family "serif"
            ;;                 :line-height (px 12)}
            ;;           (div
            ;;            :css {:border-radius "50%"
            ;;                  :width (px 15)
            ;;                  :height (px 15)
            ;;                  :text-align "center"
            ;;                  :font-weight "bold"
            ;;                  :font-family "serif"
            ;;                  :line-height (px 12)
            ;;                  :color "white"
            ;;                  :background "blue"
            ;;                  :border-color "white"
            ;;                  :border-with (px 2)}
            ;;            "i")))
            ]
        (div
         :css {:position "relative"}
         element
         content))
    #_(grids/table-grid
       :data [{:foo 1
               :bar 2
               :baaz "a"
               :quux "hi"}
              {:foo 3
               :bar 4
               :baaz "b"
               :quux "there"}
              {:foo 10
               :bar 2034234
               :baaz "c"
               :quux "long words"}]
       :row-attrs (constantly {})
       :hidden-columns hidden-columns
       :fixed-columns (cell [])
       :movable-columns movable-columns
       :columns {:foo {:title "foo"
                       :formatter (fn [item]
                                    (formula-of [item]
                                      (:foo item)))
                       :sort-key :foo
                       :css (fn [item rownum]
                              (formula-of [item rownum]
                                {:background-color (if (odd? rownum)
                                                     "purple"
                                                     "pink")}))}
                 :bar {:title "bar"
                       :formatter (fn [item]
                                    (formula-of [item]
                                      (:bar item)))
                       :sort-key :bar}
                 :baaz {:title "baaz"
                        :formatter (fn [item]
                                     (formula-of [item]
                                       (:baaz item)))
                        :sort-key :baaz}
                 :quux {:title "quux"
                        :formatter (fn [item]
                                     (formula-of [item]
                                       (:quux item)))
                        :sort-key :quux}}))))

