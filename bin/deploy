#!/bin/bash

# Die immediately if any command fails
set -e

source $(dirname $0)/common.sh
source ~/wangdera-candera-aws-creds.sh

# PROJECT_VERSION=$(head -1 project.clj | grep -oE '\d+\.\d+(\.\d+)?(-SNAPSHOT)?')
GIT_VERSION=$(git describe --tags)
GIT_SHA=$(git rev-parse HEAD)

function print_usage() {
    cat <<EOF
$(basename $0) [ --no-upload ] [ --allow-dirty ] [ --verbose | -v ] [ --help | -h ] CHANNEL

EOF
}

while [[ "$1" != "" ]]; do
    case "$1" in
        "--no-upload")
            UPLOAD="no"
            ;;
        "--allow-dirty")
            echo "Allowing uncommitted changes in the build."
            ALLOW_DIRTY=yes
            GIT_SHA="${GIT_SHA}-dirty"
            GIT_VERSION="${GIT_VERSION}-dirty"
            ;;
        "--verbose" | "-v")
            set -x
            ;;
        "--help" | "-h")
            print_usage
            exit 0
            ;;
        *)
            ARGS=$1
            ;;
    esac
    shift
done

CHANNEL=$ARGS

if [[ -z $CHANNEL ]]; then
    echo "Channel not set."
    exit 1
fi

if [[ ("$ALLOW_DIRTY" != "yes") && (-n "$(git status --porcelain)") ]]; then
  echo "Project directory has uncommitted changes. Refusing to build."
  exit 1
fi

echo "Building version ${GIT_VERSION} for channel ${CHANNEL}"

TARGETDIR=target
PACKAGEDIR=package
UPDATE_BASE=https://s3.amazonaws.com/org.craigandera.vmt

build $TARGETDIR

echo ${GIT_VERSION} > $TARGETDIR/version.txt

PACKAGEPATH=$(dirname $0)/../$PACKAGEDIR/

rm -rf $PACKAGEPATH
mkdir -p $PACKAGEPATH

cd $(dirname $0)/../

LINKS=$(mktemp)

for TYPE in "darwin,x64" "win32,ia32" "win32,x64"; do
    BUILDINFO=$(mktemp)
    PLATFORM=${TYPE%,*}
    ARCH=${TYPE##*,}
    echo "Packaging for platform ${PLATFORM} and arch ${ARCH}"
    BUILD="VMT-${PLATFORM}-${ARCH}"
    ZIPFILE="${BUILD}-${GIT_VERSION}.zip"
    DOWNLOAD_URL=$UPDATE_BASE/$CHANNEL/$ZIPFILE
    LATEST=latest-${PLATFORM}-${ARCH}.txt
    echo $DOWNLOAD_URL >> $LINKS
    cat > $BUILDINFO <<EOF
VERSION=${GIT_VERSION}
PLATFORM=${PLATFORM}
ARCH=${ARCH}
CHANNEL=${CHANNEL}
UPDATE=${UPDATE_BASE}/${CHANNEL}/${LATEST}
DOWNLOAD_URL=$DOWNLOAD_URL
EOF
    package $TARGETDIR $PACKAGEDIR $PLATFORM $ARCH $BUILDINFO
    pushd $PACKAGEDIR/$BUILD
    zip -r ../"$ZIPFILE" . -i \*
    if [[ "${UPLOAD}" != "no" ]]
    then
        aws s3 cp ../"$ZIPFILE" s3://org.craigandera.vmt/${CHANNEL}/
        aws s3 cp build.txt s3://org.craigandera.vmt/${CHANNEL}/${LATEST}
    fi
    popd
done

cat $LINKS
