#!/bin/bash

# Die immediately if any command fails
set -e

source $(dirname $0)/common.sh

# PROJECT_VERSION=$(head -1 project.clj | grep -oE '\d+\.\d+(\.\d+)?(-SNAPSHOT)?')
GIT_VERSION=$(git describe --tags)
GIT_SHA=$(git rev-parse HEAD)

function print_usage() {
  cat <<EOF
$(basename $0) [ --no-compile ] [ --no-upload ] [ --allow-dirty ] [ --verbose | -v ] [ --help | -h ] CHANNEL

EOF
}

while [[ "$1" != "" ]]; do
  case "$1" in
    "--no-upload")
      UPLOAD="no"
      echo "Build will not be uploaded."
      ;;
    "--no-compile")
      COMPILE="no"
      echo "Application will not be compiled - using existing build."
      ;;
    "--allow-dirty")
      echo "Allowing uncommitted changes in the build."
      ALLOW_DIRTY=yes
      GIT_SHA="${GIT_SHA}-dirty"
      GIT_VERSION="${GIT_VERSION}-dirty"
      ;;
    "--verbose" | "-v")
      set -x
      ;;
    "--help" | "-h")
      print_usage
      exit 0
      ;;
    *)
      ARGS=$1
      ;;
  esac
  shift
done

CHANNEL=$ARGS

if [[ -z $CHANNEL ]]; then
  echo "Channel not set."
  exit 1
fi

if [[ ("$ALLOW_DIRTY" != "yes") && (-n "$(git status --porcelain)") ]]; then
  echo "Project directory has uncommitted changes. Refusing to build."
  exit 1
fi

if [[ $UPLOAD != "no" && ( -z $AWS_ACCESS_KEY_ID || -z $AWS_SECRET_ACCESS_KEY ) ]]
then
  echo "AWS credentials not set."
  exit 1
fi

echo "Building version ${GIT_VERSION} for channel ${CHANNEL}"

TARGETDIR=target
PACKAGEDIR=dist
UPDATE_BASE=https://s3.amazonaws.com/org.craigandera.vmt
S3_BUCKET_URL=s3://org.craigandera.vmt
WEBSITE_BASE=http://org.craigandera.vmt.s3-website-us-east-1.amazonaws.com

if [[ $COMPILE != "no" ]]
then
  build $TARGETDIR
fi

echo ${GIT_VERSION} > $TARGETDIR/version.txt

PACKAGEPATH=$(dirname $0)/../$PACKAGEDIR/

rm -rf $PACKAGEPATH
mkdir -p $PACKAGEPATH

cd $(dirname $0)/../

echo "Building changelog HTML"
emacs changelog.org --batch -f org-html-export-to-html --kill

LINKS=$(mktemp)

REDIRECTS=$(mktemp)

cat > $REDIRECTS <<EOF
<html>
<head>
<link type="text/css" rel="stylesheet" href="../style.css" />
<title>Latest VMT Versions</title>
</head>
<body>
<h1>VMT</h1>
This is the Virtual Mission Tools download and change log page. VMT is a suite of tools for Falcon BMS. Visit <a href="http://www.440thvfw.com/vmt">the VMT home page</a> for more information.
<h1>Download VMT ${GIT_VERSION} (the latest on the ${CHANNEL} channel)</h1>
<ul>
EOF

npm exec -- electron-builder --linux --mac --windows --x64 --ia32

while read PLATFORM ARCH DIRECTORY
do
  BUILDINFO=$(mktemp)
  echo "Packaging for platform ${PLATFORM} and arch ${ARCH}"
  BUILD="VMT-${PLATFORM}-${ARCH}"
  ZIPFILE="${BUILD}-${GIT_VERSION}-${CHANNEL}.zip"
  DOWNLOAD_URL=$UPDATE_BASE/$CHANNEL/$ZIPFILE
  LATEST=latest-${PLATFORM}-${ARCH}.txt
  CHANGELOG_URL=${WEBSITE_BASE}/${CHANNEL}
  echo $DOWNLOAD_URL >> $LINKS
  cat > $BUILDINFO <<EOF
VERSION=${GIT_VERSION}
PLATFORM=${PLATFORM}
ARCH=${ARCH}
CHANNEL=${CHANNEL}
UPDATE=${UPDATE_BASE}/${CHANNEL}/${LATEST}?x-update-check-from-version=${GIT_VERSION}
DOWNLOAD_URL=$DOWNLOAD_URL
CHANGELOG_URL=${CHANGELOG_URL}
EOF
#  package $TARGETDIR $PACKAGEDIR $PLATFORM $ARCH $BUILDINFO
  #  pushd $PACKAGEDIR/$BUILD
  pushd $(dirname $0)/../$PACKAGEDIR/$DIRECTORY
  zip -r ../"$ZIPFILE" . -i \*
  if [[ "${UPLOAD}" != "no" ]]
  then
    aws s3 cp ../"$ZIPFILE" ${S3_BUCKET_URL}/${CHANNEL}/
    aws s3 cp ${BUILDINFO} ${S3_BUCKET_URL}/${CHANNEL}/${LATEST}
  fi
  popd

  if [[ "$PLATFORM" == "darwin" ]]
  then
    PLATFORM_NAME="Mac OS X"
  elif [[ "$PLATFORM" == "linux" ]]
  then
    PLATFORM_NAME="Linux"
  else
    PLATFORM_NAME="Windows"
  fi

  if [[ "$ARCH" == "ia64" ]]
  then
    ARCH_NAME="64 bit"
  else
    ARCH_NAME="32 bit"
  fi

  cat >> ${REDIRECTS} <<EOF
<li><a href="${DOWNLOAD_URL}">${PLATFORM_NAME} (${ARCH_NAME})</a></li>
EOF
done <<EOF
win32 x86 win-ia32-unpacked
win32 ia64 win-unpacked
darwin ia64 mac
EOF

# Unfortuantely, some crazy piece of Javascript crap broke Linux
# builds.
#
# linux ia64 linux-unpacked
# linux x86 linux-ia32-unpacked


# This is a bit of a hack, as it winds up embedding the entire HTML
# doc inside another one, but it seems to work, so what the hell.
cat >> $REDIRECTS <<EOF
</ul>
$(cat changelog.html)
</body>
</html>
EOF

if [[ "${UPLOAD}" != "no" ]]
then
  aws s3 cp ${REDIRECTS} ${S3_BUCKET_URL}/${CHANNEL}/index.html --content-type text/html
  echo $CHANGELOG_URL

  cat $LINKS
fi

mkdir -p ~/Applications/VMT
cp -r $PACKAGEDIR/mac/VMT.app ~/Applications/VMT/VMT-${GIT_VERSION}-${CHANNEL}.app
