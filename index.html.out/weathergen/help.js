// Compiled by ClojureScript 1.9.76 {:static-fns true, :optimize-constants true}
goog.provide('weathergen.help');
goog.require('cljs.core');
goog.require('hoplon.core');
weathergen.help.content = new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$wind_DASH_stability_DASH_areas,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Wind stability areas define regions of the map where the wind\n   will not be affected by the weather. Although cloud cover,\n   temperature, and pressure will change, within the bounds of a wind\n   stability region the wind speed and direction will remain\n   constant. Use this to stabilize winds in an area to support tanker\n   and carrier operations, or to provide fixed, known winds at landing\n   or target sites.") : hoplon.core.p.call(null,"Wind stability areas define regions of the map where the wind\n   will not be affected by the weather. Although cloud cover,\n   temperature, and pressure will change, within the bounds of a wind\n   stability region the wind speed and direction will remain\n   constant. Use this to stabilize winds in an area to support tanker\n   and carrier operations, or to provide fixed, known winds at landing\n   or target sites.")),cljs.core.cst$kw$display_DASH_controls,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$map,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Chooses the map image displayed in the background.") : hoplon.core.p.call(null,"Chooses the map image displayed in the background.")),cljs.core.cst$kw$display,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Selects what will be displayed on the weather grid at the left.") : hoplon.core.p.call(null,"Selects what will be displayed on the weather grid at the left.")),(function (){var G__19041 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("None") : hoplon.core.dt.call(null,"None"));
var G__19042 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("No data will be displayed") : hoplon.core.dd.call(null,"No data will be displayed"));
var G__19043 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Weather Type") : hoplon.core.dt.call(null,"Weather Type"));
var G__19044 = (function (){var G__19049 = "Display the type of weather, which determines cloud cover\n   and precipitation in Falcon. Note that unlike a radar map you might\n   see on TV, green does ";
var G__19050 = (hoplon.core.em.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.em.cljs$core$IFn$_invoke$arity$1("not") : hoplon.core.em.call(null,"not"));
var G__19051 = " indicate rain.";
var G__19052 = (function (){var G__19053 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Red") : hoplon.core.dt.call(null,"Red"));
var G__19054 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Inclement weather") : hoplon.core.dd.call(null,"Inclement weather"));
var G__19055 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Yellow") : hoplon.core.dt.call(null,"Yellow"));
var G__19056 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Poor weather") : hoplon.core.dd.call(null,"Poor weather"));
var G__19057 = (function (){var G__19059 = "Green";
var G__19060 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Fair weather") : hoplon.core.dd.call(null,"Fair weather"));
return (hoplon.core.dt.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$2(G__19059,G__19060) : hoplon.core.dt.call(null,G__19059,G__19060));
})();
var G__19058 = (function (){var G__19061 = "Clear";
var G__19062 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Sunny weather") : hoplon.core.dd.call(null,"Sunny weather"));
return (hoplon.core.dt.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$2(G__19061,G__19062) : hoplon.core.dt.call(null,G__19061,G__19062));
})();
return (hoplon.core.dl.cljs$core$IFn$_invoke$arity$6 ? hoplon.core.dl.cljs$core$IFn$_invoke$arity$6(G__19053,G__19054,G__19055,G__19056,G__19057,G__19058) : hoplon.core.dl.call(null,G__19053,G__19054,G__19055,G__19056,G__19057,G__19058));
})();
return (hoplon.core.dd.cljs$core$IFn$_invoke$arity$4 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$4(G__19049,G__19050,G__19051,G__19052) : hoplon.core.dd.call(null,G__19049,G__19050,G__19051,G__19052));
})();
var G__19045 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Pressure") : hoplon.core.dt.call(null,"Pressure"));
var G__19046 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("The barometric pressure will be displayed. Red indicates\n      low pressure, white indicates high pressure. Use the pressure\n      overlay or click a cell to get exact values.") : hoplon.core.dd.call(null,"The barometric pressure will be displayed. Red indicates\n      low pressure, white indicates high pressure. Use the pressure\n      overlay or click a cell to get exact values."));
var G__19047 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Temperature") : hoplon.core.dt.call(null,"Temperature"));
var G__19048 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("The air pressure will be displayed. White indicates cold\n      temperatures. Red indicates high temperatures. Use the pressure\n      overlay or click a cell to get exact values.") : hoplon.core.dd.call(null,"The air pressure will be displayed. White indicates cold\n      temperatures. Red indicates high temperatures. Use the pressure\n      overlay or click a cell to get exact values."));
return (hoplon.core.dl.cljs$core$IFn$_invoke$arity$8 ? hoplon.core.dl.cljs$core$IFn$_invoke$arity$8(G__19041,G__19042,G__19043,G__19044,G__19045,G__19046,G__19047,G__19048) : hoplon.core.dl.call(null,G__19041,G__19042,G__19043,G__19044,G__19045,G__19046,G__19047,G__19048));
})()], null),cljs.core.cst$kw$overlay,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Selects what data will be shown in each cell of the grid,\n    overlaid on the data selcted for 'Display'. Wind is shown as a\n    bent line, with the tail(s) in the direction the wind is coming\n    from. Each full tail indicates ten knots of wind speed, and a half\n    tail adds five.") : hoplon.core.p.call(null,"Selects what data will be shown in each cell of the grid,\n    overlaid on the data selcted for 'Display'. Wind is shown as a\n    bent line, with the tail(s) in the direction the wind is coming\n    from. Each full tail indicates ten knots of wind speed, and a half\n    tail adds five.")),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Text overlays may be hard to read when the map grid is small.\n     Use the Make Bigger button above the map to enlarge. Or click a\n     cell to read the same data from the forecast section.") : hoplon.core.p.call(null,"Text overlays may be hard to read when the map grid is small.\n     Use the Make Bigger button above the map to enlarge. Or click a\n     cell to read the same data from the forecast section."))], null),cljs.core.cst$kw$opacity,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Controls how opaque or transparent the display layer will be.\n    Slide the slider to the left to more easily see the map.") : hoplon.core.p.call(null,"Controls how opaque or transparent the display layer will be.\n    Slide the slider to the left to more easily see the map."))], null)], null),cljs.core.cst$kw$weather_DASH_params,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$temp_DASH_uniformity,cljs.core.cst$kw$pressure,cljs.core.cst$kw$time,cljs.core.cst$kw$evolution,cljs.core.cst$kw$seed,cljs.core.cst$kw$feature_DASH_size,cljs.core.cst$kw$turbulence,cljs.core.cst$kw$origin,cljs.core.cst$kw$wind_DASH_uniformity,cljs.core.cst$kw$crossfade,cljs.core.cst$kw$prevailing_DASH_wind],[(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Controls how much the temperature will vary between the bounds\n    set under 'Weather type configuration'. Should be between zero and\n    one. Lower values produce more temperatures near the mean for that\n    weather type. Higher values produce more temperatures near the min\n    and max for that weather type.") : hoplon.core.p.call(null,"Controls how much the temperature will vary between the bounds\n    set under 'Weather type configuration'. Should be between zero and\n    one. Lower values produce more temperatures near the mean for that\n    weather type. Higher values produce more temperatures near the min\n    and max for that weather type.")),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$max,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The maximum barometric pressure that will be generated.") : hoplon.core.p.call(null,"The maximum barometric pressure that will be generated.")),cljs.core.cst$kw$min,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The minimum barometric pressure that will be generated.") : hoplon.core.p.call(null,"The minimum barometric pressure that will be generated."))], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$offset,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The time in 'weather space' that is displayed on the grid.\nYou will not normally edit this field, but you can change it to move\nforward and backward in time. ") : hoplon.core.p.call(null,"The time in 'weather space' that is displayed on the grid.\nYou will not normally edit this field, but you can change it to move\nforward and backward in time. "))], null),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The number of minutes it takes for the weather to completely\n     change, even if not moving.") : hoplon.core.p.call(null,"The number of minutes it takes for the weather to completely\n     change, even if not moving.")),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The 'random seed': selects a weather system. Changing this\n    will change the weather pattern entirely. Use any number, decimal\n    or integer.") : hoplon.core.p.call(null,"The 'random seed': selects a weather system. Changing this\n    will change the weather pattern entirely. Use any number, decimal\n    or integer.")),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("How 'zoomed in' the weather will be on the underlying weather\n    pattern. Make this number bigger to get larger storm cells and\n    larger areas of fair weather. Make it smaller to get weather that\n    changes more frequently.") : hoplon.core.p.call(null,"How 'zoomed in' the weather will be on the underlying weather\n    pattern. Make this number bigger to get larger storm cells and\n    larger areas of fair weather. Make it smaller to get weather that\n    changes more frequently.")),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$power,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Weather patterns are generated by taking an underlying, regular pattern and 'warping' it into random shapes. This parameter controls how strong this warp is. Set it to zero to see the underlying weather pattern with no warping. Higher value produce more warping.") : hoplon.core.p.call(null,"Weather patterns are generated by taking an underlying, regular pattern and 'warping' it into random shapes. This parameter controls how strong this warp is. Set it to zero to see the underlying weather pattern with no warping. Higher value produce more warping.")),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("As warp strength increases, you will probably have to set a higher zoom to get good results.") : hoplon.core.p.call(null,"As warp strength increases, you will probably have to set a higher zoom to get good results."))], null)], null),new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$x,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The x location in 'weather space' that is displayed\n   on the grid. You will not normally edit this field, but you can\n   change it to see different parts of the weather pattern.") : hoplon.core.p.call(null,"The x location in 'weather space' that is displayed\n   on the grid. You will not normally edit this field, but you can\n   change it to see different parts of the weather pattern.")),cljs.core.cst$kw$y,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The y location in 'weather space' that is displayed\non the grid. You will not normally edit this field, but you can change\nit to see different parts of the weather pattern.") : hoplon.core.p.call(null,"The y location in 'weather space' that is displayed\non the grid. You will not normally edit this field, but you can change\nit to see different parts of the weather pattern."))], null),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Controls how much the wind speed will vary between the bounds\n    set under 'Weather type configuration'. Should be between zero and\n    one. Lower values produce more winds near the mean for that\n    weather type. Higher values produce more wind speeds near the min\n    and max for that weather type.") : hoplon.core.p.call(null,"Controls how much the wind speed will vary between the bounds\n    set under 'Weather type configuration'. Should be between zero and\n    one. Lower values produce more winds near the mean for that\n    weather type. Higher values produce more wind speeds near the min\n    and max for that weather type.")),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The degree to which adjacent weather types will be blended\n    together. Zero means that winds, etc. will shift abruptly at\n    weather type boundaries. A good value to use is 0.1. Values above\n    about 0.3 will give strange results.") : hoplon.core.p.call(null,"The degree to which adjacent weather types will be blended\n    together. Zero means that winds, etc. will shift abruptly at\n    weather type boundaries. A good value to use is 0.1. Values above\n    about 0.3 will give strange results.")),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The direction of the prevailing\n    wind. Although wind direction varies, especially around high- and\n    low-pressure areas, more wind will be generated in this direction\n    than in any other.") : hoplon.core.p.call(null,"The direction of the prevailing\n    wind. Although wind direction varies, especially around high- and\n    low-pressure areas, more wind will be generated in this direction\n    than in any other."))], null)]),cljs.core.cst$kw$weather_DASH_type_DASH_config,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$weight,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("How relatively common or uncommon this type of weather should\n     be. These numbers are not strict measurements, but rather\n     relative values. You will probably have to pick larger numbers\n     for sunny than for any of the others to get good results.") : hoplon.core.p.call(null,"How relatively common or uncommon this type of weather should\n     be. These numbers are not strict measurements, but rather\n     relative values. You will probably have to pick larger numbers\n     for sunny than for any of the others to get good results.")),cljs.core.cst$kw$wind,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The minimum, maximum, and mean wind speeds for each weather\n     type. Due to crossfading, these values are not strict - wind can\n     be higher than the maximum or lower than the minimum near the\n     edges of other weather types.") : hoplon.core.p.call(null,"The minimum, maximum, and mean wind speeds for each weather\n     type. Due to crossfading, these values are not strict - wind can\n     be higher than the maximum or lower than the minimum near the\n     edges of other weather types.")),cljs.core.cst$kw$temp,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The minimum, maximum, and mean temperatures for each weather\n     type. Due to crossfading, these values are not strict -\n     temperature can be higher than the maximum or lower than the\n     minimum near the edges of other weather types.") : hoplon.core.p.call(null,"The minimum, maximum, and mean temperatures for each weather\n     type. Due to crossfading, these values are not strict -\n     temperature can be higher than the maximum or lower than the\n     minimum near the edges of other weather types."))], null),cljs.core.cst$kw$displayed_DASH_time,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Controls the Falcon Time that the current weather corresponds\n   to. Edit the day, minute, and hour and then use one of the two\n   buttons.") : hoplon.core.p.call(null,"Controls the Falcon Time that the current weather corresponds\n   to. Edit the day, minute, and hour and then use one of the two\n   buttons.")),(function (){var G__19063 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Jump to") : hoplon.core.dt.call(null,"Jump to"));
var G__19064 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Jumps forward or backward to the indicated time. The\n     displayed weather may change.") : hoplon.core.dd.call(null,"Jumps forward or backward to the indicated time. The\n     displayed weather may change."));
var G__19065 = (hoplon.core.dt.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dt.cljs$core$IFn$_invoke$arity$1("Set to") : hoplon.core.dt.call(null,"Set to"));
var G__19066 = (hoplon.core.dd.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.dd.cljs$core$IFn$_invoke$arity$1("Sets the time to the indicated time. The displayed weather\n     will not change.") : hoplon.core.dd.call(null,"Sets the time to the indicated time. The displayed weather\n     will not change."));
return (hoplon.core.dl.cljs$core$IFn$_invoke$arity$4 ? hoplon.core.dl.cljs$core$IFn$_invoke$arity$4(G__19063,G__19064,G__19065,G__19066) : hoplon.core.dl.call(null,G__19063,G__19064,G__19065,G__19066));
})(),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The time is used to generate file names for downloaded FMAP\n   files, which Falcon relies on to automatically update weather.") : hoplon.core.p.call(null,"The time is used to generate file names for downloaded FMAP\n   files, which Falcon relies on to automatically update weather."))], null),cljs.core.cst$kw$movement_DASH_params,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$direction,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$heading,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The direction the weather pattern will move in.") : hoplon.core.p.call(null,"The direction the weather pattern will move in.")),cljs.core.cst$kw$speed,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The speed at which the weather pattern will move.") : hoplon.core.p.call(null,"The speed at which the weather pattern will move."))], null)], null),cljs.core.cst$kw$step,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("The number of minutes each click of the 'Step forward' or 'Step\n   backward' buttons will move in time. Also influences how many rows\n   there are in the weather forecast.") : hoplon.core.p.call(null,"The number of minutes each click of the 'Step forward' or 'Step\n   backward' buttons will move in time. Also influences how many rows\n   there are in the weather forecast.")),cljs.core.cst$kw$forecast,(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Displays the weather forecast for the selected location in the\n   weather grid.") : hoplon.core.p.call(null,"Displays the weather forecast for the selected location in the\n   weather grid."))], null);
